import React, {Component, PropTypes} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import {load} from 'redux/modules/info';
import {Line} from 'react-chartjs-2';
import lodash from 'lodash';
const options = {
  scales: {
    yAxes: [{
      ticks: {
        beginAtZero: true
      }
    }]
  }
};

const colors = [
  '#B0171F',
'#FFAEB9',
'#EEA2AD',
'#CD8C95',
'#8B5F65',
'#FFB5C5',
'#EEA9B8',
'#CD919E',
'#8B636C',
'#FF82AB',
'#EE799F',
'#CD6889',
'#8B475D',
'#EEE0E5',
'#CDC1C5',
'#8B8386',
'#FF3E96',
'#EE3A8C',
'#CD3278',
'#8B2252',
'#FF6EB4',
'#EE6AA7',
'#CD6090',
'#8B3A62',
'#EE1289',
'#CD1076',
'#8B0A50',
'#FF34B3',
'#EE30A7',
'#CD2990',
'#8B1C62',
'#FF83FA',
'#EE7AE9',
'#CD69C9',
'#8B4789',
'#FFE1FF',
'#EED2EE',
'#CDB5CD',
'#8B7B8B',
'#FFBBFF',
'#EEAEEE',
'#CD96CD',
'#8B668B',
'#FF00FF',
'#EE00EE',
'#CD00CD',
'#E066FF',
'#D15FEE',
'#B452CD',
'#7A378B',
'#BF3EFF',
'#B23AEE',
'#9A32CD',
'#68228B',
'#9B30FF',
'#912CEE',
'#7D26CD',
'#551A8B',
'#AB82FF',
'#9F79EE',
'#8968CD',
'#5D478B',
'#836FFF',
'#7A67EE',
'#6959CD',
'#473C8B',
'#0000EE',
'#4876FF',
'#436EEE',
'#3A5FCD',
'#27408B',
'#CAE1FF',
'#BCD2EE',
'#A2B5CD',
'#6E7B8B',
'#C6E2FF',
'#B9D3EE',
'#9FB6CD',
'#6C7B8B',
'#1C86EE',
'#1874CD',
'#104E8B',
'#63B8FF',
'#5CACEE',
'#4F94CD',
'#36648B',
'#B0E2FF',
'#A4D3EE',
'#8DB6CD',
'#607B8B',
'#87CEFF',
'#7EC0EE',
'#6CA6CD',
'#4A708B',
'#00B2EE',
'#009ACD',
'#00688B',
'#BFEFFF',
'#B2DFEE',
'#9AC0CD',
'#68838B',
'#98F5FF',
'#8EE5EE',
'#7AC5CD',
'#53868B',
'#00F5FF',
'#00E5EE',
'#00C5CD',
'#00868B',
'#E0EEEE',
'#C1CDCD',
'#838B8B',
'#D1EEEE',
'#B4CDCD',
'#7A8B8B',
'#BBFFFF',
'#96CDCD',
'#668B8B',
'#97FFFF',
'#8DEEEE',
'#79CDCD',
'#528B8B',
'#00EEEE',
'#00CDCD',
'#76EEC6',
'#458B74',
'#00EE76',
'#00CD66',
'#008B45',
'#54FF9F',
'#4EEE94',
'#43CD80',
'#E0EEE0',
'#C1CDC1',
'#838B83',
'#C1FFC1',
'#B4EEB4',
'#9BCD9B',
'#698B69',
'#9AFF9A',
'#7CCD7C',
'#548B54',
'#00EE00',
'#00CD00',
'#008B00',
'#76EE00',
'#66CD00',
'#458B00',
'#CAFF70',
'#BCEE68',
'#A2CD5A',
'#6E8B3D',
'#C0FF3E',
'#B3EE3A',
'#698B22',
'#EEEEE0',
'#CDCDC1',
'#8B8B83',
'#EEEED1',
'#CDCDB4',
'#8B8B7A',
'#EEEE00',
'#CDCD00',
'#8B8B00',
'#FFF68F',
'#EEE685',
'#CDC673',
'#8B864E',
'#EEE9BF',
'#CDC9A5',
'#8B8970',
'#FFEC8B',
'#EEDC82',
'#CDBE70',
'#8B814C',
'#EEC900',
'#CDAD00',
'#8B7500',
'#EEE8CD',
'#CDC8B1',
'#8B8878',
'#FFC125',
'#EEB422',
'#CD9B1D',
'#8B6914',
'#FFB90F',
'#EEAD0E',
'#CD950C',
'#8B6508',
'#EE9A00',
'#CD8500',
'#8B5A00',
'#FFE7BA',
'#EED8AE',
'#CDBA96',
'#8B7E66',
'#EECFA1',
'#CDB38B',
'#8B795E',
'#FFEFDB',
'#EEDFCC',
'#CDC0B0',
'#8B8378',
'#FFD39B',
'#EEC591',
'#CDAA7D',
'#8B7355',
'#EED5B7',
'#CDB79E',
'#8B7D6B',
'#FF7F00',
'#EE7600',
'#CD6600',
'#8B4500',
'#FFA54F',
'#EE9A49',
'#8B5A2B',
'#EECBAD',
'#CDAF95',
'#8B7765',
'#EEE5DE',
'#CDC5BF',
'#8B8682',
'#FF7F24',
'#EE7621',
'#CD661D',
'#FF8247',
'#EE7942',
'#CD6839',
'#8B4726',
'#EE9572',
'#CD8162',
'#8B5742',
'#EE4000',
'#CD3700',
'#8B2500',
'#FF8C69',
'#EE8262',
'#CD7054',
'#8B4C39',
'#FF7256',
'#EE6A50',
'#CD5B45',
'#8B3E2F',
'#EE5C42',
'#CD4F39',
'#8B3626',
'#EED5D2',
'#CDB7B5',
'#8B7D7B',
'#EEE9E9',
'#CDC9C9',
'#8B8989',
'#FFC1C1',
'#EEB4B4',
'#CD9B9B',
'#8B6969',
'#FF6A6A',
'#EE6363',
'#8B3A3A',
'#CD5555',
'#FF4040',
'#EE3B3B',
'#CD3333',
'#8B2323',
'#FF3030',
'#EE2C2C',
'#CD2626',
'#8B1A1A',
'#EE0000',
'#CD0000',
'#8E388E',
'#7171C6',
'#7D9EC0',
'#388E8E',
'#71C671',
'#8E8E38',
'#C5C1AA',
'#C67171',
'#555555',
'#AAAAAA',
'#FCFCFC',
'#FAFAFA',
'#F7F7F7',
'#F2F2F2',
'#F0F0F0',
'#EDEDED',
'#EBEBEB',
'#E8E8E8',
'#E5E5E5',
'#E3E3E3',
'#E0E0E0',
'#DEDEDE',
'#DBDBDB',
'#D9D9D9',
'#D6D6D6',
'#D4D4D4',
'#D1D1D1',
'#CFCFCF',
'#CCCCCC',
'#C9C9C9',
'#C7C7C7',
'#C4C4C4',
'#C2C2C2',
'#BFBFBF',
'#BDBDBD',
'#BABABA',
'#B8B8B8',
'#B5B5B5',
'#B3B3B3',
'#B0B0B0',
'#ADADAD',
'#ABABAB',
'#A8A8A8',
'#A6A6A6',
'#A3A3A3',
'#A1A1A1',
'#9E9E9E',
'#9C9C9C',
'#999999',
'#969696',
'#949494',
'#919191',
'#8F8F8F',
'#8C8C8C',
'#8A8A8A',
'#878787',
'#858585',
'#828282',
'#7F7F7F',
'#7D7D7D',
'#7A7A7A',
'#787878',
'#757575',
'#737373',
'#707070',
'#6E6E6E',
'#6B6B6B',
'#666666',
'#636363',
'#616161',
'#5E5E5E',
'#5C5C5C',
'#595959',
'#575757',
'#545454',
'#525252',
'#4F4F4F',
'#4D4D4D',
'#4A4A4A',
'#474747',
'#454545',
'#424242',
'#404040',
'#3D3D3D',
'#3B3B3B',
'#383838',
'#363636',
'#333333',
'#303030',
'#2E2E2E',
'#2B2B2B',
'#292929',
'#262626',
'#242424',
'#212121',
'#1F1F1F',
'#1C1C1C',
'#1A1A1A',
'#171717',
'#141414',
'#121212',
'#0F0F0F',
'#0D0D0D',
'#0A0A0A',
'#080808',
'#050505',
'#030303',
];

// 0.01 is hardcoded - fix this later
const STEP = 0.01;
const data = ind => ({
  labels: lodash.range(0, lodash.max(Object.values(ind).map(xx => xx.data.length * xx.step)), lodash.max(Object.values(ind).map(xx => xx.step))).map(xx => xx.toFixed(1)),
  datasets: Object.keys(ind).map(foo => ({
    label: foo,
    fill: false,
    lineTension: 0.1,
    backgroundColor: lodash.sample(colors), // 'rgba(75,192,192,0.4)',
    borderColor: lodash.sample(colors), // 'rgba(75,192,192,1)',
    borderCapStyle: 'butt',
    borderDash: [],
    borderDashOffset: 0.0,
    borderJoinStyle: 'miter',
    pointBorderColor: lodash.sample(colors), // 'rgba(75,192,192,1)',
    pointBackgroundColor: '#fff',
    pointBorderWidth: 1,
    pointHoverRadius: 5,
    pointHoverBackgroundColor: lodash.sample(colors), // 'rgba(75,192,192,1)',
    pointHoverBorderColor: lodash.sample(colors), // 'rgba(220,220,220,1)',
    pointHoverBorderWidth: 2,
    pointRadius: 1,
    pointHitRadius: 10,
    data: ind[foo].data
  }))
});

@connect(
    state => ({info: state.info.data}),
    dispatch => bindActionCreators({load}, dispatch))
export default class InfoBar extends Component {
  static propTypes = {
    info: PropTypes.object,
    load: PropTypes.func.isRequired
  }

  render() {
    const {info, load} = this.props; // eslint-disable-line no-shadow
    const styles = require('./InfoBar.scss');
    return (
      <div className={styles.infoBar + ' well'}>
        <div className="container">
          {/* This is an info bar
          {' '}
          <strong>{info ? info.message : 'no info!'}</strong>
          <span className={styles.time}>{info && new Date(info.time).toString()}</span> */}
          <button className="btn btn-primary" onClick={load}>Reload from server</button>
        </div>
        <Line width={100} height={50} options={{ maintainAspectRatio: false }} data={data(info.data)} options={options} />
      </div>
    );
  }
}
